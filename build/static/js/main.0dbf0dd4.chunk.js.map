{"version":3,"sources":["buttons/patient_button/patient_button.jsx","buttons/easy_buttons.jsx","App.js","serviceWorker.js","index.js"],"names":["_this","this","react_default","a","createElement","className","props","buttonData","cssClass","onClick","onButtonClick","buttonIndex","href","link","target","text","Component","state","currentButton","buttons","nestedButtons","setState","buttonList","_this2","map","button","index","patient_button_patient_button_default","key","App","buttons_easy_buttons_default","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4dAIa,IAAAA,EAAAC,KACN,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,UACKC,UAAWJ,KAAKK,MAAMC,WAAWC,SACjCC,QAAS,kBAAMT,EAAKM,MAAMI,cAAcV,EAAKM,MAAMK,eAC/CT,EAAAC,EAAAC,cAAA,KAAGQ,KAAMX,KAAKK,MAAMC,WAAWM,KAAMC,OAAO,UAAUb,KAAKK,MAAMC,WAAWQ,eAPvEC,kOCEzBC,MAAQ,CACJC,cAAe,KACfC,QAAS,CACL,CACIJ,KAAM,UACNP,SAAU,iBACVY,cAAe,CACX,CACIL,KAAM,mBACNP,SAAU,kBAEd,CACIO,KAAM,+BACNP,SAAU,mBAEd,CACIO,KAAM,4BACNP,SAAU,eACVK,KAAM,qDAEV,CACIE,KAAM,4CACNP,SAAU,oBAItB,CACIO,KAAM,WACNP,SAAU,mBAEd,CACIO,KAAK,gBACLP,SAAU,gBAEd,CACIO,KAAM,sBACNP,SAAU,sBAKtBE,cAAgB,SAACC,GACoB,YAA7BX,EAAKiB,MAAMC,cACXlB,EAAKqB,SAAS,CAACH,cAAe,OAG9BlB,EAAKqB,SAAS,CAACH,cAAelB,EAAKiB,MAAME,QAAQR,GAAaI,gFAI7D,IACDO,EADCC,EAAAtB,KAiBL,OAfiC,OAA7BA,KAAKgB,MAAMC,cACXI,EAAarB,KAAKgB,MAAME,QAEU,YAA7BlB,KAAKgB,MAAMC,cAChBI,EAAarB,KAAKgB,MAAME,QAAQ,GAAGC,cAED,aAA7BnB,KAAKgB,MAAMC,cAChBI,EAAarB,KAAKgB,MAAME,QAAQ,GAAGC,cAED,kBAA7BnB,KAAKgB,MAAMC,cAChBI,EAAarB,KAAKgB,MAAME,QAAQ,GAAGC,cAED,wBAA7BnB,KAAKgB,MAAMC,gBAChBI,EAAarB,KAAKgB,MAAME,QAAQ,GAAGC,eAGpClB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACViB,EAAWE,IAAI,SAACC,EAAQC,GACrB,OAAOxB,EAAAC,EAAAC,cAACuB,EAAD,CACNC,IAAKF,EACLf,YAAae,EACbnB,WAAYkB,EACZf,cAAea,EAAKb,0BA3EXM,oBCQda,MARf,WACE,OACE3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAC0B,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnC,EAAAC,EAAAC,cAACkC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0dbf0dd4.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './patient_button.css'\n\nexport default class extends Component {\n    render() {\n       return (\n           <div>\n               <button \n                    className={this.props.buttonData.cssClass}\n                    onClick={() => this.props.onButtonClick(this.props.buttonIndex)} >\n                        <a href={this.props.buttonData.link} target='_blank'>{this.props.buttonData.text}</a>\n                </button>\n           </div>\n       ) \n    }\n}","import React, { Component } from 'react';\nimport NavButton from './patient_button/patient_button.jsx';\nimport './easy_buttons.css'\n\nexport default class extends Component {\n    state = {\n        currentButton: null,\n        buttons: [\n            {\n                text: 'Patient', \n                cssClass: 'patient-button',\n                nestedButtons: [\n                    {\n                        text: 'Find my Provider',\n                        cssClass: 'patient-button',\n                    },\n                    {\n                        text: 'Healthgrades Patient Account',\n                        cssClass: 'provider-button'\n                    },\n                    {\n                        text: 'Patient Experience Survey',\n                        cssClass: 'admin-button',\n                        link: 'https://www.healthgrades.com/content/faqs#reviews'\n                    }, \n                    {\n                        text: 'Email and Notifications from Healthgrades',\n                        cssClass: 'partner-button'\n                    }\n                ]\n            }, \n            {\n                text: 'Provider', \n                cssClass: 'provider-button'\n            },\n            {\n                text:'Administrator',\n                cssClass: 'admin-button'\n            },\n            {\n                text: 'Healthcare Partners',\n                cssClass: 'partner-button'\n            }\n        ]\n    };\n\n    onButtonClick = (buttonIndex) => {  \n        if (this.state.currentButton === 'Patient') {\n            this.setState({currentButton: null})\n        }\n        else {\n            this.setState({currentButton: this.state.buttons[buttonIndex].text})\n        }\n    };\n    \n    render() {\n        let buttonList;\n        if (this.state.currentButton === null) {\n            buttonList = this.state.buttons;\n        }\n        else if (this.state.currentButton === 'Patient') {\n            buttonList = this.state.buttons[0].nestedButtons;\n        }\n        else if (this.state.currentButton === 'Provider') {\n            buttonList = this.state.buttons[1].nestedButtons;\n        }\n        else if (this.state.currentButton === 'Administrator') {\n            buttonList = this.state.buttons[2].nestedButtons;\n        }\n        else if (this.state.currentButton === 'Healthcare Partners') {\n            buttonList = this.state.buttons[3].nestedButtons;\n        }\n        return(\n           <div className=\"buttonContainer\">\n               {buttonList.map((button, index) => {\n                   return <NavButton \n                    key={index} \n                    buttonIndex={index}\n                    buttonData={button}\n                    onButtonClick={this.onButtonClick}/>\n               })}\n           </div>\n       )\n    }\n}","import React from 'react';\nimport EasyButtons from './buttons/easy_buttons.jsx';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EasyButtons/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}